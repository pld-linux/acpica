From 51b0d06c0a6c4d4e19432ebf930299855c8fcf23 Mon Sep 17 00:00:00 2001
From: Al Stone <ahs3@redhat.com>
Date: Fri, 18 Sep 2020 15:14:30 -0600
Subject: [PATCH 02/45] Modify utility functions to be endian-agnostic

All of the modifications here use the big-endian code previously added
(see utendian.c) to make themselves endian-agnostic; i.e., that the code
does not need to change further to work on both big- and little-endian
machines.

These particular files were changed to handle the reading and writing
of files (the length is often embedded in the binary stream), and to
handle the reading and writing of integer values.  The common cases are
to "read" a 32-bit unsigned int in little-endian format, but convert it
to host-native, and to write a byte, word, double word or quad word value
as little-endian, regardless of host-native format.

Signed-off-by: Al Stone <ahs3@redhat.com>
---
 source/common/acfileio.c           | 16 ++++++++++------
 source/common/dmtable.c            |  8 ++++----
 source/compiler/dtfield.c          |  2 +-
 source/compiler/dtsubtable.c       |  4 ++--
 source/components/tables/tbprint.c | 13 +++++++++----
 5 files changed, 26 insertions(+), 17 deletions(-)

--- acpica-unix2-20221020/source/common/acfileio.c.orig	2022-10-20 23:17:29.000000000 +0200
+++ acpica-unix2-20221020/source/common/acfileio.c	2023-07-01 21:29:48.697091987 +0200
@@ -337,11 +337,11 @@ AcGetOneTableFromFile (
      */
     if (AcpiGbl_CDAT)
     {
-        TableLength = ACPI_CAST_PTR (ACPI_TABLE_CDAT, &TableHeader)->Length;
+        TableLength = AcpiUtReadUint32(&(ACPI_CAST_PTR (ACPI_TABLE_CDAT, &TableHeader)->Length));
     }
     else
     {
-        TableLength = TableHeader.Length;
+        TableLength = AcpiUtReadUint32(&TableHeader.Length);
     }
 
     /* Allocate a buffer for the entire table */
@@ -474,6 +474,7 @@ AcValidateTableHeader (
     long                    OriginalOffset;
     UINT32                  FileSize;
     UINT32                  i;
+    UINT32                  Length;
 
 
     ACPI_FUNCTION_TRACE (AcValidateTableHeader);
@@ -537,25 +538,30 @@ AcValidateTableHeader (
     {
         /* Standard ACPI table header */
 
-        if (TableHeader.Length > (UINT32) (FileSize - TableOffset))
+        Length = AcpiUtReadUint32 (&TableHeader.Length);
+        if (Length > (UINT32) (FileSize - TableOffset))
         {
             fprintf (stderr, "Table [%4.4s] is too long for file - "
                 "needs: 0x%.2X, remaining in file: 0x%.2X\n",
-                TableHeader.Signature, TableHeader.Length,
+                TableHeader.Signature, Length,
                 (UINT32) (FileSize - TableOffset));
             return (AE_BAD_HEADER);
         }
     }
-    else if (CdatTableHeader->Length > (UINT32) (FileSize - TableOffset))
+    else
+    {
+    Length = AcpiUtReadUint32 (&CdatTableHeader->Length);
+    if (Length > (UINT32) (FileSize - TableOffset))
     {
         /* Special header for CDAT table */
 
         fprintf (stderr, "Table [CDAT] is too long for file - "
             "needs: 0x%.2X, remaining in file: 0x%.2X\n",
-            CdatTableHeader->Length,
+            Length,
             (UINT32) (FileSize - TableOffset));
         return (AE_BAD_HEADER);
     }
+    }
 
     /* For CDAT table, there are no ASCII fields in the header, we are done */
 
--- acpica-unix2-20221020/source/common/dmtable.c.orig	2022-10-20 23:17:29.000000000 +0200
+++ acpica-unix2-20221020/source/common/dmtable.c	2023-07-01 21:33:40.842501014 +0200
@@ -695,7 +695,7 @@ AcpiDmDumpDataTable (
         {
             /* Dump the raw table data */
 
-            Length = Table->Length;
+            Length = AcpiUtReadUint32 (&Table->Length);
 
             AcpiOsPrintf ("\n/*\n%s: Length %d (0x%X)\n\n",
                 ACPI_RAW_TABLE_DATA_HEADER, Length, Length);
@@ -712,7 +712,7 @@ AcpiDmDumpDataTable (
      */
     if (ACPI_COMPARE_NAMESEG (Table->Signature, ACPI_SIG_FACS))
     {
-        Length = Table->Length;
+        Length = AcpiUtReadUint32 (&Table->Length);
         Status = AcpiDmDumpTable (Length, 0, Table, 0, AcpiDmTableInfoFacs);
         if (ACPI_FAILURE (Status))
         {
@@ -755,7 +755,7 @@ AcpiDmDumpDataTable (
         /*
          * All other tables must use the common ACPI table header, dump it now
          */
-        Length = Table->Length;
+        Length = AcpiUtReadUint32(&Table->Length);
         Status = AcpiDmDumpTable (Length, 0, Table, 0, AcpiDmTableInfoHeader);
         if (ACPI_FAILURE (Status))
         {
@@ -1146,7 +1146,7 @@ AcpiDmDumpTable (
              *          Start of the vendor data (Target)
              */
             ByteLength = ((ACPI_CAST_PTR (char, Table) +
-                            (ACPI_CAST_PTR (ACPI_PMTT_HEADER, Table)->Length)) -
+                            AcpiUtReadUint32 (&(ACPI_CAST_PTR (ACPI_PMTT_HEADER, Table)->Length))) -
                             ACPI_CAST_PTR (char, Target));
             break;
 
@@ -1421,7 +1421,7 @@ AcpiDmDumpTable (
 
             AcpiOsPrintf ("%2.2X", *Target);
             Temp8 = AcpiUtGenerateChecksum (Table,
-                ACPI_CAST_PTR (ACPI_TABLE_HEADER, Table)->Length,
+                AcpiUtReadUint32 (&(ACPI_CAST_PTR (ACPI_TABLE_HEADER, Table)->Length)),
                 ACPI_CAST_PTR (ACPI_TABLE_HEADER, Table)->Checksum);
 
             if (Temp8 != ACPI_CAST_PTR (ACPI_TABLE_HEADER, Table)->Checksum)
Index: acpica-unix2-20220331/source/compiler/dtfield.c
===================================================================
--- acpica-unix2-20220331.orig/source/compiler/dtfield.c
+++ acpica-unix2-20220331/source/compiler/dtfield.c
@@ -361,7 +361,7 @@ DtCompileInteger (
         DtError (ASL_ERROR, ASL_MSG_INTEGER_SIZE, Field, AslGbl_MsgBuffer);
     }
 
-    memcpy (Buffer, &Value, ByteLength);
+    AcpiUtWriteUint (Buffer, ByteLength, &Value, sizeof (UINT64));
     return;
 }
 
Index: acpica-unix2-20220331/source/compiler/dtsubtable.c
===================================================================
--- acpica-unix2-20220331.orig/source/compiler/dtsubtable.c
+++ acpica-unix2-20220331/source/compiler/dtsubtable.c
@@ -378,6 +378,6 @@ DtSetSubtableLength (
         return;
     }
 
-    memcpy (Subtable->LengthField, &Subtable->TotalLength,
-        Subtable->SizeOfLengthField);
+    AcpiUtWriteUint (Subtable->LengthField, Subtable->SizeOfLengthField,
+                     &Subtable->TotalLength, sizeof (Subtable->TotalLength));
 }
--- acpica-unix2-20221020/source/components/tables/tbprint.c.orig	2022-10-20 23:17:32.000000000 +0200
+++ acpica-unix2-20221020/source/components/tables/tbprint.c	2023-07-01 21:41:53.759830651 +0200
@@ -46,6 +46,7 @@
 #include "actables.h"
 #include "acdisasm.h"
 #include "acutils.h"
+#include "platform/acenv.h"
 
 #define _COMPONENT          ACPI_TABLES
         ACPI_MODULE_NAME    ("tbprint")
@@ -153,7 +154,7 @@ AcpiTbPrintTableHeader (
 
         ACPI_INFO (("%-4.4s 0x%8.8X%8.8X %06X",
             Header->Signature, ACPI_FORMAT_UINT64 (Address),
-            Header->Length));
+            AcpiUtReadUint32 (&Header->Length)));
     }
     else if (ACPI_VALIDATE_RSDP_SIG (ACPI_CAST_PTR (ACPI_TABLE_RSDP,
         Header)->Signature))
@@ -167,7 +168,7 @@ AcpiTbPrintTableHeader (
         ACPI_INFO (("RSDP 0x%8.8X%8.8X %06X (v%.2d %-6.6s)",
             ACPI_FORMAT_UINT64 (Address),
             (ACPI_CAST_PTR (ACPI_TABLE_RSDP, Header)->Revision > 0) ?
-                ACPI_CAST_PTR (ACPI_TABLE_RSDP, Header)->Length : 20,
+                AcpiUtReadUint32 (&(ACPI_CAST_PTR (ACPI_TABLE_RSDP, Header)->Length)) : 20,
             ACPI_CAST_PTR (ACPI_TABLE_RSDP, Header)->Revision,
             LocalHeader.OemId));
     }
@@ -181,9 +182,12 @@ AcpiTbPrintTableHeader (
             "%-4.4s 0x%8.8X%8.8X"
             " %06X (v%.2d %-6.6s %-8.8s %08X %-4.4s %08X)",
             LocalHeader.Signature, ACPI_FORMAT_UINT64 (Address),
-            LocalHeader.Length, LocalHeader.Revision, LocalHeader.OemId,
-            LocalHeader.OemTableId, LocalHeader.OemRevision,
-            LocalHeader.AslCompilerId, LocalHeader.AslCompilerRevision));
+            AcpiUtReadUint32 (&LocalHeader.Length),
+            LocalHeader.Revision, LocalHeader.OemId,
+            LocalHeader.OemTableId,
+            AcpiUtReadUint32 (&LocalHeader.OemRevision),
+            LocalHeader.AslCompilerId,
+            AcpiUtReadUint32 (&LocalHeader.AslCompilerRevision)));
     }
 }
 
